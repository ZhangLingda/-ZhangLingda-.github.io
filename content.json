{"meta":{"title":"Lindy's Blog","subtitle":"","description":"","author":"Lindy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-04-21T09:04:13.687Z","updated":"2020-04-21T09:04:13.687Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-04-21T08:52:58.864Z","updated":"2020-04-21T08:52:58.864Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"首先谢谢你浏览我的博客\\o\\我主要在这个博客上分享一些有趣的程序、干货、技巧、开发教程、心情和学习记录等等！把一些重要的东西记录下来，方便以后查看。在现在这个互联网时代，快速的学习过程，甚至没有时间打开笔墨，博客确实是个不错的选择。既能写一年后还能看得懂博客，又能把经验变成不可替代性可见的东西。在提高自己总结性能力的同时，也让博客成为了自己一份独特的名片。 最后引用互联网上看到的一句话：“屌丝程序员的逆袭一般分两步：让自己变得牛逼，让别人知道你牛逼。”"},{"title":"所有分类","date":"2020-04-21T09:00:49.458Z","updated":"2020-04-21T09:00:49.458Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-04-21T09:05:29.650Z","updated":"2020-04-21T09:05:29.650Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"R初级06--向量","slug":"dataAnalyse/R/R6","date":"2020-04-27T07:47:21.134Z","updated":"2020-04-28T03:47:13.384Z","comments":true,"path":"2020/04/dataAnalyse/R/R6/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/R/R6/","excerpt":"向量（vector）是R语言最基本的数据类型。向量中的元素必须为同一属性，常见的向量类型有数值型向量、字符型向量和逻辑型向量","text":"向量（vector）是R语言最基本的数据类型。向量中的元素必须为同一属性，常见的向量类型有数值型向量、字符型向量和逻辑型向量 向量的创建在R中，使用 c() 函数创建向量是最常用的方式。比如，下面的代码设定数值向量ages的内容为6个小孩的年龄4，7，6，5，6和7： 1&gt; ages &lt;- c(4, 7, 6, 5, 6, 7) ## 数值型向量 这里的 c(......) 函数会把它所有的参数首尾相连而形成一个向量，其中函数可以传入任意数量参数。 函数名称“c”是单词”combine”的首字母，有“结合”的意思，很形象。 函数的参数也可以是向量: 1&gt; new_ages &lt;- c(12, ages, 17) 上面代码会在ages向量的前后分别添加12和17，形成一个新向量 new_ages。 若要查看向量内容，可直接输入向量/变量名称： 1234&gt; ages[1] 4 7 6 5 6 7&gt; new_ages[1] 12 4 7 6 5 6 7 17 向量的属性拿到一个向量，你可能会问一些问题，比如：它是啥类型，向量长度多大等等。对于数值型向量，比如，你想知道它的平均值、最大值以及最小值等。 向量的类型在R中，可以用class()函数来查看向量的类型，比如： 123456&gt; class(ages)[1] &quot;numeric&quot;&gt; class(colors)[1] &quot;character&quot;&gt; class(booleans)[1] &quot;logical&quot; 从上面结果可以看出， ages，colors和booleans 分别属于数值型、字符型和逻辑型向量 向量的大小向量的大小是指向量中元素的个数，可以 length() 函数来查看： 123456&gt; length(ages)[1] 6&gt; length(colors)[1] 4&gt; length(booleans)[1] 5 其他对于数值型向量，可通过一些函数来了解向量中的数值情况，比如： 1234567&gt; ages &lt;- c(4, 7, 6, 5, 6, 7)&gt; mean(ages) ## 平均值[1] 5.833333&gt; max(ages) ## 最大值[1] 7&gt; min(ages) ## 最小值[1] 4 向量元素的访问有时可能只需要使用向量中的某些元素，这时要用到索引。在R中，[]来指定索引，索引从位置1开始。下面来看一些例子： 获取向量ages的第四个元素 12&gt; ages[4][1] 5 获取向量ages的第二、第三和第六个元素 12345678&gt; index &lt;- c(2, 3, 6)&gt; ages[index][1] 7 6 7或者一步到位&gt; ages[c(2, 3, 6)][1] 7 6 7 访问除第四个元素之外的其它元素 12&gt; ages[-4] ## 访问除第四个元素外的其它元素[1] 4 7 6 6 7 访问大于5的元素 12&gt; ages[ages &gt; 5] ##通过逻辑运算访问所需元素[1] 7 6 6 7 向量元素的修改通过赋值运算来改变向量中的内容，比如： 123456789101112131415ages &lt;- c(4, 7, 6, 5, 6, 7)&gt; ages[1] 4 7 6 5 6 7&gt; ages[2] &lt;- 10 ## 将向量的第二个元素改为10&gt; ages[1] 4 10 6 5 6 7&gt; ages[ages&lt;&#x3D;6] &lt;- 3 ## 将向量元素小于等于6的值都改为3&gt; ages[1] 3 10 3 3 3 7&gt; ages &lt;- ages[1:4] ## 将向量截断为只包含前面四个元素&gt; ages[1] 3 10 3 3&gt; ages &lt;- NULL ## 删除向量中的所有元素&gt; agesNULL 有名称的向量上述向量中的元素都没有名称，其实在R中可以给向量中的每个元素命名。 创建有名称的向量可用c()函数直接创建有名称向量，比如： 1234&gt; new_ages &lt;- c(kim&#x3D;7, rob&#x3D;6, tony&#x3D;12) ## 向量元素的名称分别为&#39;kim&#39;, &#39;rob&#39;, &#39;tony&#39;，值分别为7,6,12&gt; new_ages kim rob tony 7 6 12 对于无名称向量，利用names()函数可用给向量的每个元素命名，比如： 1234567&gt; ages &lt;- c(4, 7, 6, 5, 6, 7) ## 无名称向量&gt; names(ages) &lt;- c(&#39;bob&#39;, &#39;tom&#39;, &#39;lucy&#39;, &#39;andy&#39;, &#39;sandy&#39;, &#39;joe&#39;) ## 向量元素命名&gt; ages bob tom lucy andy sandy joe 4 7 6 5 6 7 &gt; names(ages) ## 输出向量名称[1] &quot;bob&quot; &quot;tom&quot; &quot;lucy&quot; &quot;andy&quot; &quot;sandy&quot; &quot;joe&quot; 元素访问对于有名称向量，通过指标和名称都可以访问元素，分四种情况： ages[i]：返回向量元素的值和名称 ages[[i]]：只返回向量元素的值 ages[元素名称]：返回向量元素的值和名称 ages[[元素名称]]：只返回向量元素的值 12345678910&gt; ages[2]tom 7 &gt; ages[[2]][1] 7&gt; ages[&#39;tom&#39;]tom 7 &gt; ages[[&#39;tom&#39;]][1] 7 删除元素的名称利用as.vector()函数可以删除向量中元素的名称，比如： 123456&gt; new_ages &lt;- c(kim&#x3D;7, rob&#x3D;6, tony&#x3D;12)&gt; new_ages kim rob tony 7 6 12 &gt; as.vector(new_ages)[1] 7 6 12 c()函数的参数向量中的元素必须为同一属性，创建向量会经常使用c()函数。如果 c() 函数的参数类型不一致，函数会强制将所有参数变为同一类型，比如： 123456789101112131415161718&gt; c(2, 3, 6)[1] 2 3 6&gt; c(2, TRUE, &#39;hello&#39;) ## 全部强制转化为 character[1] &quot;2&quot; &quot;TRUE&quot; &quot;hello&quot;&gt; c(2.1, TRUE, &#39;hello&#39;) ## 全部强制转化为 character[1] &quot;2.1&quot; &quot;TRUE&quot; &quot;hello&quot;&gt; c(2+3i, TRUE, &#39;hello&#39;) ## 全部强制转化为 character[1] &quot;2+3i&quot; &quot;TRUE&quot; &quot;hello&quot;&gt; c(2, TRUE) ## 全部强制转化为 integer[1] 2 1&gt; c(2.1, TRUE) ## 全部强制转化为 numeric[1] 2.1 1.0&gt; c(2+3i, TRUE) ## 全部强制转化为 complex[1] 2+3i 1+0i&gt; c(2, 2.1) ## 全部强制转化为 numeric[1] 2.0 2.1&gt; c(2, 2.1, 2+3i) ## 全部强制转化为 complex[1] 2.0+0i 2.1+0i 2.0+3i 通过上面的对比，我们知道当 c() 函数的参数类型不同时，会强制转化成同一类型；而且每种类型的强弱不一样，强弱顺序为： character &gt; complex &gt; numeric &gt; integer &gt; logical 向量的基本运算单个数（标量）也是一个向量，只不过它的长度为1。我们可以通过 is.vector() 函数来验证,可以通过is.vector()函数来判断变量是否为向量 1234&gt; is.vector(3) ## 单个数也是向量[1] TRUE&gt; is.vector(c(2, 3, 5))[1] TRUE 向量的长度相同时当向量的长度相同时，向量间的运算只不过是对应元素的运算: 12345678&gt; x &lt;- c(1, 3, 5)&gt; y &lt;- c(4, 3, 2)&gt; x + y[1] 5 6 7&gt; x * y[1] 4 9 10&gt; x ^ y[1] 1 27 25 向量的长度不同时当向量的长度不同时，短的向量会自动循环补齐至与长向量相同，然后再运算 12345678910111213&gt; x &lt;- c(1, 3)&gt; y &lt;- c(4, 3, 2, 1)&gt; z &lt;- c(2, 4, 5)&gt; x + 4 ## 单个的数值4会被补齐为 c(4, 4)[1] 5 7&gt; x - y ## 等价于 c(1, 3, 1, 3) - c(4, 3, 2, 1)，因为x会自动补齐为 c(1, 3, 1, 3)[1] -3 0 -1 2&gt; x &#x2F; y ## 等价于 c(1, 3, 1, 3) &#x2F; c(4, 3, 2, 1)，因为x会自动补齐为 c(1, 3, 1, 3)[1] 0.25 1.00 0.50 3.00&gt; x &#x2F; z ## 等价于c(1, 3, 1) &#x2F; c(2, 4, 5)，由于长向量的长度不是短向量长度的倍数，会给出警告信息，不过还是会给出结果[1] 0.50 0.75 0.20Warning message:In x&#x2F;z : longer object length is not a multiple of shorter object length 自动循环补齐的这种特性只有在R语言中才有！超强的向量运算功能！ 其它基本运算基本运算函数作用于向量也只是简单地作用于相应元素 1234567&gt; x &lt;- c(2, 3, 5)&gt; exp(x)[1] 7.389056 20.085537 148.413159&gt; sin(x)[1] 0.9092974 0.1411200 -0.9589243&gt; log(x)[1] 0.6931472 1.0986123 1.6094379 除了上面基本运算外，向量还有点积（内积）操作，用到 %*% 运算符: 12345&gt; x &lt;- c(1, 3, 5)&gt; y &lt;- c(2, 4, 6)&gt; x %*% y ## 点积 1*2+3*4+5*6 [,1][1,] 44 结果是一个1x1的矩阵，其中只有一个元素44，关于矩阵后续将会介绍 创建向量的其他方式除了使用 c() 函数来创建向量外，还有另外三种方式：冒号 : 运算符、seq()函数和rep()函数: 冒号 : 运算符冒号 : 运算符可用来产生等差级数向量，其使用形式为x:y，其规则为： 当x&lt;y时，将生成 x, x+1, x+2, x+3, …….等差级数，公差为1，最后的元素≤y 当x&gt;y时，将生成 x, x-1, x-2, x-3, ……..等差级数，公差为-1，最后的元素≥y 当x和y相同时，将输出只有一个元素的向量，元素就为x 12345678910111213141516&gt; 2:7 ## integer[1] 2 3 4 5 6 7&gt; 9:3 ## integer，公差为-1[1] 9 8 7 6 5 4 3&gt; 3.14:9 ## real[1] 3.14 4.14 5.14 6.14 7.14 8.14&gt; 3:9.3 ## integer[1] 3 4 5 6 7 8 9&gt; 3.14:9.3 ## real[1] 3.14 4.14 5.14 6.14 7.14 8.14 9.14&gt; 9:3.2 ## integer，公差为-1[1] 9 8 7 6 5 4&gt; 7:7[1] 7&gt; 3.4:3.4[1] 3.4 可以非常简单地产生等比级数向量: 1234&gt; 2^(0:5) ## 公比为2[1] 1 2 4 8 16 32&gt; 2.1^(0:5) ## 公比为2.1[1] 1.00000 2.10000 4.41000 9.26100 19.44810 40.84101 seq()函数seq() 函数也是用来产生等差级数向量的，其原型为 seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),length.out = NULL, along.with = NULL, ...) 。典型用法有： seq(from, to) ：等价于 from:to 运算 seq(from, to, by= ) ：参数 by 设置公差的大小，最后元素 ≤to 值 seq(from, to, length.out= ) ：参数 length.out 设置输出向量的长度，第一个元素为 from 值，最后元素的值为 to ，公差由函数自动计算给出 12345678910&gt; seq(2, 7)[1] 2 3 4 5 6 7&gt; seq(11, 3)[1] 11 10 9 8 7 6 5 4 3&gt; seq(2.1, 7)[1] 2.1 3.1 4.1 5.1 6.1&gt; seq(2, 7, by&#x3D;1.1) ## 公差为1.1[1] 2.0 3.1 4.2 5.3 6.4&gt; seq(2, 7, length.out&#x3D;8) ## 输出向量的长度为8，第一个元素为2，最后元素为7[1] 2.000000 2.714286 3.428571 4.142857 4.857143 5.571429 6.285714 7.000000 rep()函数重复向量中的元素： 1234567891011121314&gt; rep(1:4, 2)[1] 1 2 3 4 1 2 3 4&gt; rep(1:4, each &#x3D; 2) ## not the same.[1] 1 1 2 2 3 3 4 4&gt; rep(1:4, c(2,2,2,2)) ## same as second.[1] 1 1 2 2 3 3 4 4&gt; rep(1:4, c(2,1,2,1))[1] 1 1 2 3 3 4&gt; rep(1:4, each &#x3D; 2, len &#x3D; 4) ## first 4 only.[1] 1 1 2 2&gt; rep(1:4, each &#x3D; 2, len &#x3D; 10) ## 8 integers plus two recycled 1&#39;s. [1] 1 1 2 2 3 3 4 4 1 1&gt; rep(1:4, each &#x3D; 2, times &#x3D; 3) ## length 24, 3 complete replications [1] 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 向量有关函数 max(x)：找出x向量中的最大值 min(x)：找出x向量中的最小值 range(x)：找出x向量中的最小值和最大值 length(x)：求x向量的长度 sum(x)：求x向量的元素和 prod(x)：求x向量的元素积 mean(x)：求x向量的算术平均值 median(x)：求x向量的中位数 var(x)：求x向量的方差 sd(x)：求x向量的标准差 cor(x, y)：求x向量和y向量的相关系数 sort(x)：将x向量按大小顺序排序 rank(x)：返回x向量中对应元素的排名 order(x)：返回对应“排名”的元素在x向量中的位置 quantile(x)：返回x向量的最小值、下分位数、中位数、上分位数和最大值 cumsum(x)：返回x向量的累计和 cumprod(x)：返回x向量的累计积 cummax(x)：返回x向量的累计最大值 cummin(x)：返回x向量的累计最小值 pmax(x, y, z)：返回x、y、z向量对应位置上的最大值 pmin(x, y, z)：返回x、y、z向量对应位置上的最小值 table(x)：返回x向量的元素统计频数 diff(x)：返回x向量的相邻两元素之差 unique(x)：删除x向量中的重复元素 union(x, y)：x向量和y向量的并集 intersect(x, y)：x向量和y向量的交集 setdiff(x, y)：x向量和y向量的差集（即返回属于x向量的元素但不属于y向量） x %in% y：判断x向量中的元素是否在y向量中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&gt; x &lt;- c(2, 4, 5, 3, 2)&gt; y &lt;- c(7, 2, 3, 8, 6)&gt; z &lt;- c(1, 7, 2, 9, 0)&gt; max(x) ## 最大值[1] 5&gt; min(x) ## 最小值[1] 2&gt; range(x) ## 最小值和最大值[1] 2 5&gt; length(x) ## 长度[1] 5&gt; sum(x) ## 求和[1] 16&gt; prod(x) ## 求积[1] 240&gt; mean(x) ## 算术平均值[1] 3.2&gt; median(x) ## 中位数[1] 3&gt; var(x) ## 方差[1] 1.7&gt; sd(x) ## 标准差[1] 1.30384&gt; cor(x, y) ## 相关系数[1] -0.7555763&gt; sort(x) ## 按大小顺序排序[1] 2 2 3 4 5&gt; rank(y) ## 对应元素的排名[1] 4 1 2 5 3&gt; order(x) ## 对应排名的元素在x向量中的位置[1] 1 5 4 2 3&gt; quantile(x) ## 最小值、下分位数、中位数、上分位数和最大值 0% 25% 50% 75% 100% 2 2 3 4 5&gt; cumsum(x) ## 累计和[1] 2 6 11 14 16&gt; cumprod(x) ## 累计积[1] 2 8 40 120 240&gt; cummax(x) ## 累计最大值[1] 2 4 5 5 5&gt; cummin(x) ## 累计最小值[1] 2 2 2 2 2&gt; pmax(x, y, z) ## x、y、z向量对应位置上的最大值[1] 7 7 5 9 6&gt; pmin(x, y, z) ## x、y、z向量对应位置上的最小值[1] 1 2 2 3 0&gt; table(x) ## 元素统计频数x2 3 4 52 1 1 1&gt; diff(x) ## 相邻两元素之差[1] 2 1 -2 -1&gt; unique(x) ## 删除重复元素[1] 2 4 5 3&gt; union(x, y) ## 并集[1] 2 4 5 3 7 8 6&gt; intersect(x, y) ## 交集[1] 2 3&gt; setdiff(x, y) ## 差集[1] 4 5&gt; x %in% y ## 判断x向量中的元素是否在y向量中[1] TRUE FALSE FALSE TRUE TRUE","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}]},{"title":"R初级05--取整运算、有效小数、有效数字","slug":"dataAnalyse/R/R5","date":"2020-04-27T07:28:43.244Z","updated":"2020-04-27T07:50:11.862Z","comments":true,"path":"2020/04/dataAnalyse/R/R5/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/R/R5/","excerpt":"取整运算：通俗点讲就是将一个小数（浮点数）转化成整数。比如，我们可以将3.42转化为3或者4 有效小数：将一个小数近似为小数位特定的小数。比如，将3.1415926转化为两位有效小数，即3.14 有效数字：将一个数近似为特定有效位数的数字。比如，将23456保留两位有效数字，即23000","text":"取整运算：通俗点讲就是将一个小数（浮点数）转化成整数。比如，我们可以将3.42转化为3或者4 有效小数：将一个小数近似为小数位特定的小数。比如，将3.1415926转化为两位有效小数，即3.14 有效数字：将一个数近似为特定有效位数的数字。比如，将23456保留两位有效数字，即23000 对应的在R中有相应的函数： 取整运算：ceiling()，floor()，trunc()和round() 有效小数：round() 有效数字：signif() ceiling()函数ceiling()函数返回对应数字的“天花板”值，即不小于该数字的最小整数，俗称向上取整。比如： 123456ceiling(2.8)[1] 3ceiling(-1.7)[1] -1ceiling(5.0)[1] 5 floor()函数floor()函数返回对应数字的“地板”值，即不大于该数字的最大整数，俗称向下取整。比如： 12345678910trunc(-1.7)[1] -1trunc(2.8)[1] 2trunc(5.0)[1] 5trunc(2.8) &#x3D;&#x3D; floor(2.8)[1] TRUEtrunc(-1.7) &#x3D;&#x3D; ceiling(-1.7)[1] TRUE trunc()函数trunc()函数的特点是“向零取整”。 对于数字a，trunc(a)将返回靠近0那一侧的那个整数，见下图。如果a为正数，trunc(a) == floor(a)；如果a为负数，trunc(a) == ceiling(a)。 12345678910trunc(-1.7)[1] -1trunc(2.8)[1] 2trunc(5.0)[1] 5trunc(2.8) &#x3D;&#x3D; floor(2.8)[1] TRUEtrunc(-1.7) &#x3D;&#x3D; ceiling(-1.7)[1] TRUE round()函数R中采用banker准则，即四舍六入五成双准则 “四舍”是指 ≤ 4舍去；“六入”是指 ≥ 6进一位；“五成双”分两种情况：(1)当5后面有数字时，舍5进一位。(2) 当5后面没有数字时，再分两种情况：(i)当5前一位为奇数时，舍5进一位；(ii)当5前一位为偶数时，舍5不进位。 123456789101112round(2.3)[1] 2round(2.6)[1] 3round(2.50001)[1] 3round(2.5)[1] 2round(3.5)[1] 4round(5.0)[1] 5 其实round()函数的原型是round(x, digits = 0)。其中参数digits设定小数点的位数，默认为0，即小数点后零位(取整)。 我们来看一下保留一位小数（即digits = 1）的例子: 12345678910round(3.24, 1)[1] 3.2round(3.26, 1)[1] 3.3round(3.2500001, 1)[1] 3.3round(3.25, 1)[1] 3.2round(3.35, 1)[1] 3.4 signif()函数signif()是保留有效数字的函数，常用于科学计数，它的原型为signif(x, digits = 6)。其中参数digits设定有效数字的位数，默认为6 12345678signif(3.5455562)[1] 3.54556signif(35455562)[1] 35455600signif(35455562, 7)[1] 35455560signif(-35455562, 7)[1] -35455560","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}]},{"title":"R初级04--复数","slug":"dataAnalyse/R/R4","date":"2020-04-27T07:01:41.831Z","updated":"2020-04-27T07:50:11.861Z","comments":true,"path":"2020/04/dataAnalyse/R/R4/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/R/R4/","excerpt":"复数是实数的延伸。任一复数都可表达为a+bi，其中a和b都为实数，分别称为复数的实部和虚部；而i为虚数单位，它是-1的一个平方根，即i^2=-1","text":"复数是实数的延伸。任一复数都可表达为a+bi，其中a和b都为实数，分别称为复数的实部和虚部；而i为虚数单位，它是-1的一个平方根，即i^2=-1 基本运算123456789101112z1 &lt;- 2 - 3iz2 &lt;- 1 + 4iz1 + z2[1] 3+1iz1 / z2[1] -0.5882353-0.6470588ilog(z1)[1] 1.282475-0.982794iexp(z1)[1] -7.31511-1.042744isin(z1)[1] 9.154499+4.168907i 复数的处理 Re(z)：获取复数的实部 Im(z)：获取复数的虚部 Mod(z): 计算复数的模，即$|z|= \\sqrt {a^2+b^2}$ Arg(z)：计算复数的相位（幅角），即 θ= atan(b/a)，结果为弧度制 Conj(z)：计算复数的共轭$\\overline{z}$，即 $a - bi$ 1234567891011z &lt;- 3 + 4iRe(z)[1] 3Im(z)[1] 4Mod(z)[1] 5Arg(z)[1] 0.9272952Conj(z)[1] 3-4i 其他函数1234567z &lt;- 3 + 4iis.complex(z) ### 判断一个数是否为复数[1] TRUEis.complex(4)[1] FALSEas.complex(3.5) ### 将一个数转化为复数[1] 3.5+0i","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}]},{"title":"R初级03--关系运算、逻辑运算","slug":"dataAnalyse/R/R3","date":"2020-04-27T06:28:31.302Z","updated":"2020-04-27T07:50:11.860Z","comments":true,"path":"2020/04/dataAnalyse/R/R3/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/R/R3/","excerpt":"R的逻辑常量：TRUE和FALSE 在R中，TRUE和FALSE分别表示逻辑常量真和假，其值分别为1和0","text":"R的逻辑常量：TRUE和FALSE 在R中，TRUE和FALSE分别表示逻辑常量真和假，其值分别为1和0 在其它语言中，TRUE和FALSE习惯被称为布尔值 (Boolean value)。 关系运算运算符：&gt;，&lt;，&gt;=，&lt;=，== 和 != 逻辑运算&amp;，|，和 !运算符分别表示逻辑与，或和非 1234567891011121314&gt; TRUE &amp; FALSE[1] FALSE&gt; TRUE &amp; TRUE[1] TRUE&gt; TRUE | FALSE[1] TRUE&gt; FALSE | FALSE[1] FALSE&gt; !FALSE[1] TRUE&gt; !TRUE[1] FALSE&gt; (2 &gt; 3) | (7 &gt;= 7)[1] TRUE 除了上面三个常用的逻辑运算符之外，xor()函数有时也用到，它表示逻辑异或。如果两个值不相同，异或结果为TRUE；如果两个值相同，异或结果则为FALSE 有些人会纳闷，为啥xor(2, 3)结果会为FALSE。那是因为在R中，所有非零值在逻辑运算中都会被当作为TRUE。因此xor(2, 3)等价于xor(TRUE, TRUE), 再举一些其它例子：","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}]},{"title":"R初级02--基本算术运算","slug":"dataAnalyse/R/R2","date":"2020-04-27T03:45:15.888Z","updated":"2020-04-27T07:52:50.800Z","comments":true,"path":"2020/04/dataAnalyse/R/R2/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/R/R2/","excerpt":"R的一个最简单功能，是它可以充当计算器来用，而且是个超级计算器。 R中的基本运算包括：算术运算、关系运算、逻辑运算、赋值运算以及其他运算。","text":"R的一个最简单功能，是它可以充当计算器来用，而且是个超级计算器。 R中的基本运算包括：算术运算、关系运算、逻辑运算、赋值运算以及其他运算。 这篇博客将介绍R中的算术运算，主要包括： 四则运算 整除运算 幂指数运算 自然指数运算 对数运算 绝对值运算 平方根运算 三角函数运算 1. 四则运算在R中，加减乘除运算符分别用 +， -， *和 /来表示，比如： 123456&gt; 7 + 4 - 5 * 2[1] 1&gt; 12 - 2 / 3[1] 11.33333&gt; 3 / (4 - 2)[1] 1.5 注意：&gt;是输入提示符，系统自动给出，不用输入；代码输完后回车运行代码；[1]后面跟着的是运算结果。 2. 整除运算整除的商用%/%来表示；整除的余数用%%来表示，比如： 123456&gt; 23 %/% 3[1] 7&gt; 23 %% 3[1] 2&gt; (23 %/% 3) * 3 + 23 %% 3 == 23[1] TRUE 3. 幂指数运算幂指数运算符用^来表示，比如： 12345678&gt; 2^3[1] 8&gt; 1.5^2[1] 2.25&gt; 9^0.5[1] 3&gt; 27^(1 / 3)[1] 3 4. 自然指数运算exp()表示： 12345678&gt; exp(0)[1] 1&gt; exp(1) ###自然常数e[1] 2.718282 &gt; exp(2)[1] 7.389056&gt; exp(1)^2[1] 7.389056 5. 对数运算对数运算是幂运算的逆操作，在R中可分为以下四类： 以自然常数e为底的对数：log() 以2为底的对数：log2() 以10为底的对数：log10() 以任意数a为底的对数：log( , base = a) 12345678910&gt; log(exp(2))[1] 2&gt; log(10)[1] 2.302585&gt; log2(2)[1] 1&gt; log10(1000)[1] 3&gt; log(49, base = 7)[1] 2 6. 绝对值运算绝对值运算用abs()函数，比如： 1234&gt; abs(2)[1] 2&gt; abs(-2)[1] 2 7. 平方根运算平方根运算用sqrt()函数，比如： 12345678&gt; sqrt(2)[1] 1.4142142^0.5[1] 1.414214&gt; sqrt(100)[1] 10&gt; 100^0.5[1] 10 从上面可知，一个数的平方根值等于这个数的0.5次幂。 8. 三角函数运算在介绍三角函数之前，先介绍跟三角函数紧密关联的一个常数：π（圆周率，3.1415926……）。在R中直接用pi表示： 12&gt; pi[1] 3.141593 R中的三角函数采用弧度制，sin()，cos()，tan()，asin()，acos()和atan()分别表示正弦、余弦、正切、反正弦、反余弦和反正切。比如： 1234567891011121314&gt; sin(pi/6)[1] 0.5&gt; sin(pi/2)[1] 1&gt; cos(pi/2)[1] 6.123032e-17&gt; cos(pi/2) == 0[1] FALSE&gt; tan(pi/4)[1] 1&gt; atan(1)[1] 0.7853982&gt; pi/4[1] 0.7853982 奇怪的是，cos(pi / 2)的值竟然不等于0，而是一个非常非常小的值6.123032e-17（非常接近0）。其中e-17是科学计数表示，意思是10的-17次方，非常小。这个现象是由计算精度所导致的，后续博客我们还会讨论。 本文摘自MoreInfo","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}]},{"title":"Python初级01--关键字和标识符","slug":"dataAnalyse/Python/Python1","date":"2020-04-26T09:50:41.609Z","updated":"2020-04-28T01:29:33.443Z","comments":true,"path":"2020/04/dataAnalyse/Python/Python1/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/Python/Python1/","excerpt":"","text":"","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python","slug":"数据分析/python","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"R初级01--实用第三方包","slug":"dataAnalyse/R/R1","date":"2020-04-26T09:47:19.960Z","updated":"2020-04-27T07:51:12.964Z","comments":true,"path":"2020/04/dataAnalyse/R/R1/","link":"","permalink":"http://yoursite.com/2020/04/dataAnalyse/R/R1/","excerpt":"","text":"安装好R和Rstudio之后，使用第三方包前，需要先安装它： 安装用install.packages()函数，比如install.packages(&#39;data.table&#39;) 加载包用library()函数，比如library(animation) 用library(help=data.table)来查看data.table包的相关信息","categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-20T09:03:33.789Z","updated":"2020-04-27T03:50:10.808Z","comments":true,"path":"2020/04/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"数据分析","slug":"数据分析","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"R","slug":"数据分析/R","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/R/"},{"name":"python","slug":"数据分析/python","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python/"}],"tags":[{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]}