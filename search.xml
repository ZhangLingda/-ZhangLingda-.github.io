<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>R初级08--矩阵</title>
      <link href="/2020/04/dataAnalyse/R/R10/"/>
      <url>/2020/04/dataAnalyse/R/R10/</url>
      
        <content type="html"><![CDATA[<p>暂停更新\o\</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级09--矩阵</title>
      <link href="/2020/04/dataAnalyse/R/R9/"/>
      <url>/2020/04/dataAnalyse/R/R9/</url>
      
        <content type="html"><![CDATA[<p>暂停更新\o\</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级08--矩阵</title>
      <link href="/2020/04/dataAnalyse/R/R8/"/>
      <url>/2020/04/dataAnalyse/R/R8/</url>
      
        <content type="html"><![CDATA[<p>R中有5种基本数据结构，分别是向量(vector)、矩阵(matrix)、数组(array)、数据框(data frame)和列表(list)。他们的结构如图：</p><br><p><img src="https://cdn.jsdelivr.net/gh/ZhangLingda/blogImages/blogImg/14120044-46a930091f88040e.png" alt="matrix"></p><a id="more"></a><blockquote><p>其中<strong>向量、矩阵和数组</strong>中的数据类型必须是相同的；而<strong>数据框和列表</strong>中的数据类型可以是不一样的。矩阵是一个二维数组。</p></blockquote><h2 id="矩阵的创建"><a href="#矩阵的创建" class="headerlink" title="矩阵的创建"></a>矩阵的创建</h2><ol><li><p>在R中，使用 <code>matrix()</code> 函数来创建矩阵是最常用的方式。 <code>matrix()</code> 的原型为： <code>matrix(data=NA, nrow=1, ncol = 1, byrow=FALSE, dimnames=NULL)</code> ，其中参数的意义分别为：</p><ul><li><p><code>data</code>：包含了矩阵的元素，一般是个向量，默认情况下是NA</p></li><li><p><code>nrow</code> 和 <code>ncol</code>：设定矩阵的行、列数目；一般这两个值<strong>只需设定一个</strong>，另外一个值可根据元素个数自动给出</p></li><li><p><code>byrow</code>：设定矩阵是按行(byrow=TRUE)填充还是按列(byrow=FALSE)填充，<strong>默认情况下按列填充</strong></p></li><li><p><code>dimnames</code>：包含了以字符型向量表示的行名和列名，是一个列表，<strong>默认情况下没有行列名</strong></p></li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat1 &lt;- matrix(1:6, nrow&#x3D;2)   ##默认按列填充</span><br><span class="line">&gt; mat1</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    3    5</span><br><span class="line">[2,]    2    4    6</span><br><span class="line"></span><br><span class="line">&gt; mat2 &lt;- matrix(1:6, nrow&#x3D;2, byrow&#x3D;TRUE)   ##设定byrow&#x3D;TRUE按行填充</span><br><span class="line">&gt; mat2</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    2    3</span><br><span class="line">[2,]    4    5    6</span><br><span class="line"></span><br><span class="line">&gt; rnames &lt;- c(&#39;R1&#39;, &#39;R2&#39;)   ##行名</span><br><span class="line">&gt; cnames &lt;- c(&#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;)  ##列名</span><br><span class="line">&gt; mat3 &lt;- matrix(1:6, nrow&#x3D;2, dimnames&#x3D;list(rnames, cnames))   ##通过设定dimnames参数添加行列名</span><br><span class="line">&gt; mat3</span><br><span class="line">   C1 C2 C3</span><br><span class="line">R1  1  3  5</span><br><span class="line">R2  2  4  6</span><br><span class="line"></span><br><span class="line">###也可通过使用rownames()、colnames()函数来给矩阵添加行、列名</span><br><span class="line">&gt; rownames(mat) &lt;- c(&#39;r1&#39;, &#39;r2&#39;)    ##添加行名</span><br><span class="line">&gt; colnames(mat) &lt;- c(&#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;)   ##添加列名</span><br><span class="line">&gt; mat</span><br><span class="line">   c1 c2 c3</span><br><span class="line">r1  1  2  3</span><br><span class="line">r2  4  5  6</span><br></pre></td></tr></table></figure><blockquote><p>也可通过使用 <code>rownames()</code>、<code>colnames()</code> 函数来给矩阵添加行、列名</p></blockquote><br><ol start="2"><li>也可通过使用 <code>dim()</code> 函数来创建矩阵，其原理是通过<strong>改变维度使向量变为矩阵</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat4 &lt;- 1:6   ##向量</span><br><span class="line">&gt; dim(mat4) &lt;- c(3, 2)  ##变为3行2列的矩阵</span><br><span class="line">&gt; is.matrix(mat4)   ##判断是否为矩阵</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; mat4      ##默认按列填充</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    4</span><br><span class="line">[2,]    2    5</span><br><span class="line">[3,]    3    6</span><br></pre></td></tr></table></figure><p>可结合矩阵转置函数 <code>t()</code>,将上述例子变为行填充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat4 &lt;- 1:6</span><br><span class="line">&gt; dim(mat4) &lt;- c(2, 3)   ##与上面不一样</span><br><span class="line">&gt; mat4 &lt;- t(mat4)   ##矩阵转置</span><br><span class="line">&gt; mat4   ##按行填充</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    2</span><br><span class="line">[2,]    3    4</span><br><span class="line">[3,]    5    6</span><br></pre></td></tr></table></figure><h2 id="元素的属性"><a href="#元素的属性" class="headerlink" title="元素的属性"></a>元素的属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat &lt;- matrix(1:6, nrow&#x3D;2, dimnames&#x3D;list(rnames, cnames))</span><br><span class="line">&gt; mat</span><br><span class="line">   C1 C2 C3</span><br><span class="line">R1  1  3  5</span><br><span class="line">R2  2  4  6</span><br><span class="line">&gt; class(mat)  ##结构类型</span><br><span class="line">[1] &quot;matrix&quot;</span><br><span class="line">&gt; typeof(mat)  ##元素数据类型</span><br><span class="line">[1] &quot;integer&quot;</span><br><span class="line">&gt; dim(mat)  ##维度，2行3列</span><br><span class="line">[1] 2 3</span><br><span class="line">&gt; length(mat)  ##元素个数</span><br><span class="line">[1] 6</span><br><span class="line">&gt; rownames(mat)  ##获取行名</span><br><span class="line">[1] &quot;R1&quot; &quot;R2&quot;</span><br><span class="line">&gt; colnames(mat)  ##获取列名</span><br><span class="line">[1] &quot;C1&quot; &quot;C2&quot; &quot;C3&quot;</span><br></pre></td></tr></table></figure><h2 id="元素的访问"><a href="#元素的访问" class="headerlink" title="元素的访问"></a>元素的访问</h2><p>类似于向量元素的访问，只是增加了一个维度而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat &lt;- matrix(1:9, nrow&#x3D;3, dimnames&#x3D;list(c(&#39;r1&#39;, &#39;r2&#39;, &#39;r3&#39;), c(&#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;)))</span><br><span class="line">&gt; mat</span><br><span class="line">   c1 c2 c3</span><br><span class="line">r1  1  4  7</span><br><span class="line">r2  2  5  8</span><br><span class="line">r3  3  6  9</span><br><span class="line">&gt; mat[2, 2]  ##访问第2行第2列元素</span><br><span class="line">[1] 5</span><br><span class="line">&gt; mat[2, ]  ##访问第2行元素</span><br><span class="line">c1 c2 c3</span><br><span class="line"> 2  5  8</span><br><span class="line">&gt; is.vector(mat[2, ])  ##返回为向量</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; mat[, 2]  ##访问第2列元素</span><br><span class="line">r1 r2 r3</span><br><span class="line"> 4  5  6</span><br><span class="line">&gt; mat[c(2, 3), c(2, 3)]  ##访问第2、3行第2、3列元素，返回为矩阵</span><br><span class="line">   c2 c3</span><br><span class="line">r2  5  8</span><br><span class="line">r3  6  9</span><br><span class="line"></span><br><span class="line">### 也可通过行、列名来访问元素</span><br><span class="line">&gt; mat[&#39;r2&#39;, &#39;c2&#39;]</span><br><span class="line">[1] 5</span><br><span class="line">&gt; mat[&#39;r2&#39;, ]</span><br><span class="line">c1 c2 c3</span><br><span class="line"> 2  5  8</span><br><span class="line">&gt; mat[c(&#39;r2&#39;,&#39;r3&#39;), c(&#39;c2&#39;,&#39;c3&#39;)]</span><br><span class="line">   c2 c3</span><br><span class="line">r2  5  8</span><br><span class="line">r3  6  9</span><br></pre></td></tr></table></figure><p>当用上面的方式获取某个或某行或某列元素时，返回的是一个向量。如何使返回值也为矩阵呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat[2, 2, drop&#x3D;FALSE]</span><br><span class="line">   c2</span><br><span class="line">r2  5</span><br><span class="line">&gt; mat[2, , drop&#x3D;FALSE]</span><br><span class="line">   c1 c2 c3</span><br><span class="line">r2  2  5  8</span><br><span class="line"></span><br><span class="line">&gt; is.matrix(mat[2, 2, drop&#x3D;FALSE])   ##返回的是个矩阵</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; is.matrix(mat[2, , drop&#x3D;FALSE])   ##返回的是个矩阵</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><blockquote><p>通过将参数 <code>drop</code> 设定为 <code>FALSE</code> ，返回的将会是个矩阵</p></blockquote><h2 id="元素的修改"><a href="#元素的修改" class="headerlink" title="元素的修改"></a>元素的修改</h2><p>通常我们通过<strong>赋值运算</strong>来改变矩阵中的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat &lt;- matrix(1:9, nrow&#x3D;3) </span><br><span class="line">&gt; mat</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    4    7</span><br><span class="line">[2,]    2    5    8</span><br><span class="line">[3,]    3    6    9</span><br><span class="line"></span><br><span class="line">&gt; mat[2, 2] &lt;- 20   ##将第2行第2列元素改为20</span><br><span class="line">&gt; mat</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    4    7</span><br><span class="line">[2,]    2   20    8</span><br><span class="line">[3,]    3    6    9</span><br><span class="line"></span><br><span class="line">&gt; mat[ ,3] &lt;- 10   ##将第3列元素都改为10</span><br><span class="line">&gt; mat</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    4   10</span><br><span class="line">[2,]    2   20   10</span><br><span class="line">[3,]    3    6   10</span><br><span class="line"></span><br><span class="line">&gt; mat[mat&lt;6] &lt;- 7   ##将小于6的元素都改为7</span><br><span class="line">&gt; mat</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    7    7   10</span><br><span class="line">[2,]    7   20   10</span><br><span class="line">[3,]    7    6   10</span><br><span class="line"></span><br><span class="line">&gt; mat &lt;- mat[-2, ]   ##删掉第二行</span><br><span class="line">&gt; mat</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    7    7   10</span><br><span class="line">[2,]    7    6   10</span><br></pre></td></tr></table></figure><p>通过 <code>rbind()</code> 和 <code>cbind()</code> 函数可添加行和列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; mat &lt;- matrix(1:9, nrow&#x3D;3)</span><br><span class="line">&gt; mat</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    4    7</span><br><span class="line">[2,]    2    5    8</span><br><span class="line">[3,]    3    6    9</span><br><span class="line"></span><br><span class="line">&gt; rbind(mat, c(12, 13, 14))   ##在原矩阵mat后面添加一行</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    4    7</span><br><span class="line">[2,]    2    5    8</span><br><span class="line">[3,]    3    6    9</span><br><span class="line">[4,]   12   13   14</span><br><span class="line"></span><br><span class="line">&gt; cbind(mat, c(12, 13, 14))   ##在原矩阵mat后面添加一列</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    4    7   12</span><br><span class="line">[2,]    2    5    8   13</span><br><span class="line">[3,]    3    6    9   14</span><br></pre></td></tr></table></figure><h2 id="矩阵的基本运算"><a href="#矩阵的基本运算" class="headerlink" title="矩阵的基本运算"></a>矩阵的基本运算</h2><h3 id="矩阵间的四则运算"><a href="#矩阵间的四则运算" class="headerlink" title="矩阵间的四则运算"></a>矩阵间的四则运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; A &lt;- matrix(1:4, ncol&#x3D;2)</span><br><span class="line">&gt; B &lt;- matrix(2:5, ncol&#x3D;2)</span><br><span class="line">&gt; A</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line">&gt; B</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    2    4</span><br><span class="line">[2,]    3    5</span><br><span class="line"></span><br><span class="line">&gt; A + B     ##两矩阵相加</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    3    7</span><br><span class="line">[2,]    5    9</span><br><span class="line"></span><br><span class="line">&gt; A &#x2F; B     ##两矩阵相除</span><br><span class="line">          [,1] [,2]</span><br><span class="line">[1,] 0.5000000 0.75</span><br><span class="line">[2,] 0.6666667 0.80</span><br></pre></td></tr></table></figure><h3 id="矩阵与向量的四则运算"><a href="#矩阵与向量的四则运算" class="headerlink" title="矩阵与向量的四则运算"></a>矩阵与向量的四则运算</h3><p>矩阵也可直接与向量进行四则运算，此时要求<strong>向量元素的个数不能超过矩阵元素的个数</strong>。当向量长度小于矩阵元素个数，向量会自动按列<strong>循环补齐</strong>至与矩阵相同，然后再运算。如果矩阵元素的个数不是向量元素的个数的整数倍，结果会附带警告信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; A &lt;- matrix(1:4, ncol&#x3D;2)</span><br><span class="line">&gt; A</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line"></span><br><span class="line">&gt; A + 3     ##3将自动补齐为 matrix(c(3, 3, 3, 3), ncol&#x3D;2)，结果为每个元素都加上3</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    4    6</span><br><span class="line">[2,]    5    7</span><br><span class="line"></span><br><span class="line">&gt; A + c(2, 3)     ##向量c(2, 3)将自动补齐为 matrix(c(2, 3, 2, 3), ncol&#x3D;2)</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    3    5</span><br><span class="line">[2,]    5    7</span><br><span class="line"></span><br><span class="line">&gt; A + c(2, 3, 4)     ##向量c(2, 3, 4)将自动补齐为 matrix(c(2, 3, 4, 2), ncol&#x3D;2)，并给出警告信息</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    3    7</span><br><span class="line">[2,]    5    6</span><br><span class="line">Warning message:</span><br><span class="line">In A + c(2, 3, 4) :</span><br><span class="line">  longer object length is not a multiple of shorter object length</span><br><span class="line"></span><br><span class="line">&gt; A + 2:6      ##向量元素的个数不能超过矩阵元素的个数</span><br><span class="line">Error: dims [product 4] do not match the length of object [5]</span><br><span class="line">In addition: Warning message:</span><br><span class="line">In A + 2:6 :</span><br><span class="line">  longer object length is not a multiple of shorter object length</span><br></pre></td></tr></table></figure><h3 id="其他运算"><a href="#其他运算" class="headerlink" title="其他运算"></a>其他运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; A &lt;- matrix(1:4, ncol&#x3D;2)</span><br><span class="line">&gt; A</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line"></span><br><span class="line">&gt; sin(A)</span><br><span class="line">          [,1]       [,2]</span><br><span class="line">[1,] 0.8414710  0.1411200</span><br><span class="line">[2,] 0.9092974 -0.7568025</span><br><span class="line"></span><br><span class="line">&gt; exp(A)</span><br><span class="line">         [,1]     [,2]</span><br><span class="line">[1,] 2.718282 20.08554</span><br><span class="line">[2,] 7.389056 54.59815</span><br></pre></td></tr></table></figure><blockquote><p>基本运算函数作用于矩阵也是作用于相应元素</p></blockquote><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p>当 <code>A</code> 为mxn矩阵，可用 <code>t()</code> 函数来求 <code>A</code> 的转置（nxm矩阵）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; A &lt;- matrix(1:6, ncol&#x3D;2)</span><br><span class="line">&gt; A</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    4</span><br><span class="line">[2,]    2    5</span><br><span class="line">[3,]    3    6</span><br><span class="line"></span><br><span class="line">&gt; t(A)</span><br><span class="line">     [,1] [,2] [,3]</span><br><span class="line">[1,]    1    2    3</span><br><span class="line">[2,]    4    5    6</span><br></pre></td></tr></table></figure><p>在R中，向量默认为是<strong>列向量</strong>。若将 <code>t()</code> 函数作用于一个向量<code>x</code>，返回结果将为<strong>行矩阵</strong>。若想得到一个列矩阵，可用t(t(x))（即转置两次）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- 1:4     ##向量</span><br><span class="line">&gt; x</span><br><span class="line">[1] 1 2 3 4</span><br><span class="line">&gt; is.matrix(x)    ##判断是否为矩阵</span><br><span class="line">[1] FALSE</span><br><span class="line"></span><br><span class="line">&gt; t(x)     ##行矩阵</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    2    3    4</span><br><span class="line">&gt; is.matrix(t(x))</span><br><span class="line">[1] TRUE</span><br><span class="line"></span><br><span class="line">&gt; t(t(x))     ##列矩阵，转置两次</span><br><span class="line">     [,1]</span><br><span class="line">[1,]    1</span><br><span class="line">[2,]    2</span><br><span class="line">[3,]    3</span><br><span class="line">[4,]    4</span><br></pre></td></tr></table></figure><h2 id="矩阵的内积"><a href="#矩阵的内积" class="headerlink" title="矩阵的内积"></a>矩阵的内积</h2><h2 id="矩阵的行列式"><a href="#矩阵的行列式" class="headerlink" title="矩阵的行列式"></a>矩阵的行列式</h2><h2 id="对角元素的相关操作"><a href="#对角元素的相关操作" class="headerlink" title="对角元素的相关操作"></a>对角元素的相关操作</h2><h2 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h2><h2 id="上三角和下三角"><a href="#上三角和下三角" class="headerlink" title="上三角和下三角"></a>上三角和下三角</h2><h2 id="矩阵转化为向量"><a href="#矩阵转化为向量" class="headerlink" title="矩阵转化为向量"></a>矩阵转化为向量</h2>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级07--NA、Inf、NaN、NULL 特殊值</title>
      <link href="/2020/04/dataAnalyse/R/R7/"/>
      <url>/2020/04/dataAnalyse/R/R7/</url>
      
        <content type="html"><![CDATA[<p><code>NA</code>：<strong>缺失值</strong> ;  <code>Inf</code>：<strong>无穷大</strong> ; <code>NaN</code>：<strong>非数值</strong> ; <code>NULL</code>：<strong>空值</strong></p><a id="more"></a><h2 id="Inf"><a href="#Inf" class="headerlink" title="Inf"></a>Inf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2 &#x2F; 0      ## 正无穷大</span><br><span class="line">[1] Inf</span><br><span class="line">&gt; -2 &#x2F; 0      ## 负无穷大</span><br><span class="line">[1] -Inf</span><br></pre></td></tr></table></figure><p><code>Inf</code> 同时也参与运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2&#x2F;Inf       ## 当分子为有限值、分母无穷大时，结果为 0</span><br><span class="line">[1] 0</span><br><span class="line">&gt; exp(-Inf)      ## 自然数e的负无穷大次幂为0</span><br><span class="line">[1] 0</span><br><span class="line">&gt; (0:3)^Inf       ## 0的穷大次幂为0；1的穷大次幂还为1；大于1的数的无穷大次幂为无穷大</span><br><span class="line">[1]   0   1 Inf Inf</span><br></pre></td></tr></table></figure><p>在R中用 <code>is.finite()</code>, <code>is.infinite()</code>来判断是否为无穷大数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; is.finite(2)</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; is.infinite(2&#x2F;0)</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h2 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h2><p>有些运算会导致结果为非数值，在R中用NaN来表示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0 &#x2F; 0</span><br><span class="line">[1] NaN</span><br><span class="line">&gt; Inf - Inf</span><br><span class="line">[1] NaN</span><br><span class="line">&gt; Inf &#x2F; Inf</span><br><span class="line">[1] NaN</span><br></pre></td></tr></table></figure><p>在R中，用 <code>is.nan()</code>来判断是否为非数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; is.nan(2)</span><br><span class="line">[1] FALSE</span><br><span class="line">&gt; is.nan(NA)     ## 缺失值NA不是非数值</span><br><span class="line">[1] FALSE</span><br><span class="line">&gt; is.nan(0&#x2F;0)</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><p><strong>空值</strong>，即没有内容。一般常用在函数参数中，表示该参数没有被赋予任何值。也经常用在初始化变量，表示变量没有任何内容，因此它的长度为0:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- NULL</span><br><span class="line">&gt; length(x)</span><br><span class="line">[1] 0</span><br><span class="line">&gt; is.null(x)      ## is.null()函数判断是否为空值</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h2 id="NA"><a href="#NA" class="headerlink" title="NA"></a>NA</h2><p><strong>缺失值</strong>(Missing value)，我们将会经常碰到这个值</p><ol><li>判断向量里是否有缺失值，不能用 <code>==</code>:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(2, 5, NA, 7, NA, 8)</span><br><span class="line">&gt; x &#x3D;&#x3D; NA</span><br><span class="line">[1] NA NA NA NA NA NA</span><br><span class="line">&gt; is.na(x)    ## 正确姿势</span><br><span class="line">[1] FALSE FALSE  TRUE FALSE  TRUE FALSE</span><br></pre></td></tr></table></figure><blockquote><p>在R中使用is.na()来判断是否为缺失值</p></blockquote><br><ol start="2"><li>有时我们想<strong>删除缺失值或想知道有多少个缺失值</strong>，可以通过下面代码来实现:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; x[! is.na(x)]     ## 删除缺失值</span><br><span class="line">[1] 2 5 8</span><br><span class="line">&gt; sum(is.na(x))     ## 缺失值的个数</span><br><span class="line">[1] 2</span><br></pre></td></tr></table></figure><br><ol start="3"><li>对于处理含有缺失值的向量，<strong>很多函数在默认参数下不能工作</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(2, 5, NA, 7, NA, 8)</span><br><span class="line">&gt; mean(x)</span><br><span class="line">[1] NA</span><br><span class="line">&gt; max(x)</span><br><span class="line">[1] NA</span><br><span class="line">&gt; mean(x, na.rm&#x3D;TRUE)</span><br><span class="line">[1] 5.5</span><br><span class="line">&gt; max(x, na.rm&#x3D;TRUE)</span><br><span class="line">[1] 8</span><br></pre></td></tr></table></figure><blockquote><p>通过设置 <code>na.rm</code> 为 <code>TRUE</code> 来删除缺失值，然后再统计</p></blockquote><br><ol start="4"><li>有时我们还想知道缺失值NA在哪个位置。此时可以通过 <code>which()</code> 函数来输出位置索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(2, 5, NA, 7, NA, 8)</span><br><span class="line">&gt; which(is.na(x))    ## 第3和5个元素是缺失值</span><br><span class="line">[1] 3 5</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级06--向量</title>
      <link href="/2020/04/dataAnalyse/R/R6/"/>
      <url>/2020/04/dataAnalyse/R/R6/</url>
      
        <content type="html"><![CDATA[<p>向量（vector）是R语言最基本的数据类型。向量中的元素必须为同一属性，常见的向量类型有<strong><em>数值型向量、字符型向量和逻辑型向量</em></strong></p><a id="more"></a><h2 id="向量的创建"><a href="#向量的创建" class="headerlink" title="向量的创建"></a>向量的创建</h2><p>在R中，使用 <code>c()</code> 函数创建向量是最常用的方式。比如，下面的代码设定数值向量ages的内容为6个小孩的年龄4，7，6，5，6和7：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages &lt;- c(4, 7, 6, 5, 6, 7)   ## 数值型向量</span><br></pre></td></tr></table></figure><p>这里的 <code>c(......)</code> 函数会把它所有的参数首尾相连而形成一个向量，其中函数可以传入任意数量参数。</p><blockquote><p>函数名称“c”是单词”combine”的首字母，有“结合”的意思，很形象。</p></blockquote><p><strong>函数的参数也可以是向量:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; new_ages &lt;- c(12, ages, 17)</span><br></pre></td></tr></table></figure><p>上面代码会在ages向量的前后分别添加12和17，形成一个新向量 <code>new_ages</code>。</p><p>若要查看向量内容，可直接输入向量/变量名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages</span><br><span class="line">[1] 4 7 6 5 6 7</span><br><span class="line">&gt; new_ages</span><br><span class="line">[1] 12  4  7  6  5  6  7 17</span><br></pre></td></tr></table></figure><h2 id="向量的属性"><a href="#向量的属性" class="headerlink" title="向量的属性"></a>向量的属性</h2><p>拿到一个向量，你可能会问一些问题，比如：它是啥类型，向量长度多大等等。对于数值型向量，比如，你想知道它的平均值、最大值以及最小值等。</p><h3 id="向量的类型"><a href="#向量的类型" class="headerlink" title="向量的类型"></a>向量的类型</h3><p>在R中，可以用class()函数来查看向量的类型，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; class(ages)</span><br><span class="line">[1] &quot;numeric&quot;</span><br><span class="line">&gt; class(colors)</span><br><span class="line">[1] &quot;character&quot;</span><br><span class="line">&gt; class(booleans)</span><br><span class="line">[1] &quot;logical&quot;</span><br></pre></td></tr></table></figure><p>从上面结果可以看出， <code>ages，colors和booleans</code> 分别属于<strong>数值型、字符型和逻辑型向量</strong></p><h3 id="向量的大小"><a href="#向量的大小" class="headerlink" title="向量的大小"></a>向量的大小</h3><p>向量的大小是指向量中元素的个数，可以 <code>length()</code> 函数来查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; length(ages)</span><br><span class="line">[1] 6</span><br><span class="line">&gt; length(colors)</span><br><span class="line">[1] 4</span><br><span class="line">&gt; length(booleans)</span><br><span class="line">[1] 5</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于数值型向量，可通过一些函数来了解向量中的数值情况，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages &lt;- c(4, 7, 6, 5, 6, 7)</span><br><span class="line">&gt; mean(ages)    ## 平均值</span><br><span class="line">[1] 5.833333</span><br><span class="line">&gt; max(ages)   ## 最大值</span><br><span class="line">[1] 7</span><br><span class="line">&gt; min(ages)   ## 最小值</span><br><span class="line">[1] 4</span><br></pre></td></tr></table></figure><h2 id="向量元素的访问"><a href="#向量元素的访问" class="headerlink" title="向量元素的访问"></a>向量元素的访问</h2><p>有时可能只需要使用向量中的某些元素，这时要用到索引。在R中，[]来指定索引，索引从位置1开始。下面来看一些例子：</p><ul><li>获取向量ages的第四个元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages[4]</span><br><span class="line">[1] 5</span><br></pre></td></tr></table></figure><ul><li>获取向量ages的第二、第三和第六个元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; index &lt;- c(2, 3, 6)</span><br><span class="line">&gt; ages[index]</span><br><span class="line">[1] 7 6 7</span><br><span class="line"></span><br><span class="line">或者一步到位</span><br><span class="line"></span><br><span class="line">&gt; ages[c(2, 3, 6)]</span><br><span class="line">[1] 7 6 7</span><br></pre></td></tr></table></figure><ul><li>访问除第四个元素之外的其它元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages[-4]   ## 访问除第四个元素外的其它元素</span><br><span class="line">[1] 4 7 6 6 7</span><br></pre></td></tr></table></figure><ul><li>访问大于5的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages[ages &gt; 5]  ##通过逻辑运算访问所需元素</span><br><span class="line">[1] 7 6 6 7</span><br></pre></td></tr></table></figure><h2 id="向量元素的修改"><a href="#向量元素的修改" class="headerlink" title="向量元素的修改"></a>向量元素的修改</h2><p>通过<strong>赋值运算</strong>来改变向量中的内容，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ages &lt;- c(4, 7, 6, 5, 6, 7)</span><br><span class="line">&gt; ages</span><br><span class="line">[1] 4 7 6 5 6 7</span><br><span class="line">&gt; ages[2] &lt;- 10  ## 将向量的第二个元素改为10</span><br><span class="line">&gt; ages</span><br><span class="line">[1]  4 10  6  5  6  7</span><br><span class="line">&gt; ages[ages&lt;&#x3D;6] &lt;- 3  ## 将向量元素小于等于6的值都改为3</span><br><span class="line">&gt; ages</span><br><span class="line">[1]  3 10  3  3  3  7</span><br><span class="line">&gt; ages &lt;- ages[1:4]   ## 将向量截断为只包含前面四个元素</span><br><span class="line">&gt; ages</span><br><span class="line">[1]  3 10  3  3</span><br><span class="line">&gt; ages &lt;- NULL    ## 删除向量中的所有元素</span><br><span class="line">&gt; ages</span><br><span class="line">NULL</span><br></pre></td></tr></table></figure><h2 id="有名称的向量"><a href="#有名称的向量" class="headerlink" title="有名称的向量"></a>有名称的向量</h2><p>上述向量中的元素都没有名称，其实在R中可以给向量中的每个元素命名。</p><h3 id="创建有名称的向量"><a href="#创建有名称的向量" class="headerlink" title="创建有名称的向量"></a>创建有名称的向量</h3><p>可用c()函数直接创建有名称向量，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; new_ages &lt;- c(kim&#x3D;7, rob&#x3D;6, tony&#x3D;12)  ## 向量元素的名称分别为&#39;kim&#39;, &#39;rob&#39;, &#39;tony&#39;，值分别为7,6,12</span><br><span class="line">&gt; new_ages</span><br><span class="line"> kim  rob tony </span><br><span class="line">   7    6   12</span><br></pre></td></tr></table></figure><p>对于无名称向量，利用names()函数可用给向量的每个元素命名，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages &lt;- c(4, 7, 6, 5, 6, 7)   ## 无名称向量</span><br><span class="line">&gt; names(ages) &lt;- c(&#39;bob&#39;, &#39;tom&#39;, &#39;lucy&#39;, &#39;andy&#39;, &#39;sandy&#39;, &#39;joe&#39;)   ## 向量元素命名</span><br><span class="line">&gt; ages</span><br><span class="line">  bob   tom  lucy  andy sandy   joe </span><br><span class="line">    4     7     6     5     6     7 </span><br><span class="line">&gt; names(ages)  ## 输出向量名称</span><br><span class="line">[1] &quot;bob&quot;   &quot;tom&quot;   &quot;lucy&quot;  &quot;andy&quot;  &quot;sandy&quot; &quot;joe&quot;</span><br></pre></td></tr></table></figure><h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><p>对于有名称向量，通过指标和名称都可以访问元素，分四种情况：</p><ul><li>ages[i]：返回向量元素的值和名称</li><li>ages[[i]]：只返回向量元素的值</li><li>ages[元素名称]：返回向量元素的值和名称</li><li>ages[[元素名称]]：只返回向量元素的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; ages[2]</span><br><span class="line">tom </span><br><span class="line">  7 </span><br><span class="line">&gt; ages[[2]]</span><br><span class="line">[1] 7</span><br><span class="line">&gt; ages[&#39;tom&#39;]</span><br><span class="line">tom </span><br><span class="line">  7 </span><br><span class="line">&gt; ages[[&#39;tom&#39;]]</span><br><span class="line">[1] 7</span><br></pre></td></tr></table></figure><h3 id="删除元素的名称"><a href="#删除元素的名称" class="headerlink" title="删除元素的名称"></a>删除元素的名称</h3><p>利用as.vector()函数可以删除向量中元素的<strong>名称</strong>，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; new_ages &lt;- c(kim&#x3D;7, rob&#x3D;6, tony&#x3D;12)</span><br><span class="line">&gt; new_ages</span><br><span class="line"> kim  rob tony </span><br><span class="line">   7    6   12 </span><br><span class="line">&gt; as.vector(new_ages)</span><br><span class="line">[1]  7  6 12</span><br></pre></td></tr></table></figure><h2 id="c-函数的参数"><a href="#c-函数的参数" class="headerlink" title="c()函数的参数"></a><code>c()</code>函数的参数</h2><p>向量中的元素必须为同一属性，创建向量会经常使用c()函数。如果 <code>c()</code> 函数的参数类型不一致，函数会<strong>强制将所有参数变为同一类型</strong>，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; c(2, 3, 6)</span><br><span class="line">[1] 2 3 6</span><br><span class="line">&gt; c(2, TRUE, &#39;hello&#39;)         ## 全部强制转化为 character</span><br><span class="line">[1] &quot;2&quot;     &quot;TRUE&quot;  &quot;hello&quot;</span><br><span class="line">&gt; c(2.1, TRUE, &#39;hello&#39;)       ## 全部强制转化为 character</span><br><span class="line">[1] &quot;2.1&quot;   &quot;TRUE&quot;  &quot;hello&quot;</span><br><span class="line">&gt; c(2+3i, TRUE, &#39;hello&#39;)      ## 全部强制转化为 character</span><br><span class="line">[1] &quot;2+3i&quot;  &quot;TRUE&quot;  &quot;hello&quot;</span><br><span class="line">&gt; c(2, TRUE)                  ## 全部强制转化为 integer</span><br><span class="line">[1] 2 1</span><br><span class="line">&gt; c(2.1, TRUE)                ## 全部强制转化为 numeric</span><br><span class="line">[1] 2.1 1.0</span><br><span class="line">&gt; c(2+3i, TRUE)               ## 全部强制转化为 complex</span><br><span class="line">[1] 2+3i 1+0i</span><br><span class="line">&gt; c(2, 2.1)                   ## 全部强制转化为 numeric</span><br><span class="line">[1] 2.0 2.1</span><br><span class="line">&gt; c(2, 2.1, 2+3i)             ## 全部强制转化为 complex</span><br><span class="line">[1] 2.0+0i 2.1+0i 2.0+3i</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的对比，我们知道当 <code>c()</code> 函数的参数类型不同时，会强制转化成同一类型；而且每种类型的强弱不一样，强弱顺序为： <code>character &gt; complex &gt; numeric &gt; integer &gt; logical</code></p></blockquote><h2 id="向量的基本运算"><a href="#向量的基本运算" class="headerlink" title="向量的基本运算"></a>向量的基本运算</h2><p>单个数（标量）也是一个向量，只不过它的长度为1。我们可以通过 <code>is.vector()</code> 函数来验证,可以通过is.vector()函数来判断变量是否为向量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; is.vector(3)   ## 单个数也是向量</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; is.vector(c(2, 3, 5))</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h3 id="向量的长度相同时"><a href="#向量的长度相同时" class="headerlink" title="向量的长度相同时"></a>向量的长度相同时</h3><p>当向量的长度相同时，向量间的运算只不过是对应元素的运算:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(1, 3, 5)</span><br><span class="line">&gt; y &lt;- c(4, 3, 2)</span><br><span class="line">&gt; x + y</span><br><span class="line">[1] 5 6 7</span><br><span class="line">&gt; x * y</span><br><span class="line">[1]  4  9 10</span><br><span class="line">&gt; x ^ y</span><br><span class="line">[1]  1 27 25</span><br></pre></td></tr></table></figure><h3 id="向量的长度不同时"><a href="#向量的长度不同时" class="headerlink" title="向量的长度不同时"></a>向量的长度不同时</h3><p>当向量的长度不同时，短的向量会<strong>自动循环补齐</strong>至与长向量相同，然后再运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(1, 3)</span><br><span class="line">&gt; y &lt;- c(4, 3, 2, 1)</span><br><span class="line">&gt; z &lt;- c(2, 4, 5)</span><br><span class="line">&gt; x + 4                 ## 单个的数值4会被补齐为 c(4, 4)</span><br><span class="line">[1] 5 7</span><br><span class="line">&gt; x - y                 ## 等价于 c(1, 3, 1, 3) - c(4, 3, 2, 1)，因为x会自动补齐为 c(1, 3, 1, 3)</span><br><span class="line">[1] -3  0 -1  2</span><br><span class="line">&gt; x &#x2F; y                 ## 等价于 c(1, 3, 1, 3) &#x2F; c(4, 3, 2, 1)，因为x会自动补齐为 c(1, 3, 1, 3)</span><br><span class="line">[1] 0.25 1.00 0.50 3.00</span><br><span class="line">&gt; x &#x2F; z                 ## 等价于c(1, 3, 1) &#x2F; c(2, 4, 5)，由于长向量的长度不是短向量长度的倍数，会给出警告信息，不过还是会给出结果</span><br><span class="line">[1] 0.50 0.75 0.20</span><br><span class="line">Warning message:</span><br><span class="line">In x&#x2F;z : longer object length is not a multiple of shorter object length</span><br></pre></td></tr></table></figure><blockquote><p>自动循环补齐的这种特性只有在R语言中才有！超强的向量运算功能！</p></blockquote><h3 id="其它基本运算"><a href="#其它基本运算" class="headerlink" title="其它基本运算"></a>其它基本运算</h3><p>基本运算函数作用于向量也只是简单地作用于相应元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(2, 3, 5)</span><br><span class="line">&gt; exp(x)</span><br><span class="line">[1]   7.389056  20.085537 148.413159</span><br><span class="line">&gt; sin(x)</span><br><span class="line">[1]  0.9092974  0.1411200 -0.9589243</span><br><span class="line">&gt; log(x)</span><br><span class="line">[1] 0.6931472 1.0986123 1.6094379</span><br></pre></td></tr></table></figure><p>除了上面基本运算外，向量还有<strong>点积</strong>（内积）操作，用到 <code>%*%</code> 运算符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(1, 3, 5)</span><br><span class="line">&gt; y &lt;- c(2, 4, 6)</span><br><span class="line">&gt; x %*% y         ## 点积 1*2+3*4+5*6</span><br><span class="line">     [,1]</span><br><span class="line">[1,]   44</span><br></pre></td></tr></table></figure><blockquote><p>结果是一个1x1的矩阵，其中只有一个元素44，关于矩阵后续将会介绍</p></blockquote><h2 id="创建向量的其他方式"><a href="#创建向量的其他方式" class="headerlink" title="创建向量的其他方式"></a>创建向量的其他方式</h2><p>除了使用 <code>c()</code> 函数来创建向量外，还有另外三种方式：<strong>冒号 <code>:</code> 运算符、seq()函数和rep()函数</strong>:</p><h3 id="冒号-运算符"><a href="#冒号-运算符" class="headerlink" title="冒号 : 运算符"></a>冒号 <code>:</code> 运算符</h3><p>冒号 <code>:</code> 运算符可用来产生等差级数向量，其使用形式为x:y，其规则为：</p><ul><li><p>当x&lt;y时，将生成 x, x+1, x+2, x+3, …….等差级数，公差为1，最后的元素≤y</p></li><li><p>当x&gt;y时，将生成 x, x-1, x-2, x-3, ……..等差级数，公差为-1，最后的元素≥y</p></li><li><p>当x和y相同时，将输出只有一个元素的向量，元素就为x</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2:7   ## integer</span><br><span class="line">[1] 2 3 4 5 6 7</span><br><span class="line">&gt; 9:3   ## integer，公差为-1</span><br><span class="line">[1] 9 8 7 6 5 4 3</span><br><span class="line">&gt; 3.14:9   ## real</span><br><span class="line">[1] 3.14 4.14 5.14 6.14 7.14 8.14</span><br><span class="line">&gt; 3:9.3   ## integer</span><br><span class="line">[1] 3 4 5 6 7 8 9</span><br><span class="line">&gt; 3.14:9.3   ## real</span><br><span class="line">[1] 3.14 4.14 5.14 6.14 7.14 8.14 9.14</span><br><span class="line">&gt; 9:3.2   ## integer，公差为-1</span><br><span class="line">[1] 9 8 7 6 5 4</span><br><span class="line">&gt; 7:7</span><br><span class="line">[1] 7</span><br><span class="line">&gt; 3.4:3.4</span><br><span class="line">[1] 3.4</span><br></pre></td></tr></table></figure><p>可以非常简单地产生等比级数向量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2^(0:5)    ## 公比为2</span><br><span class="line">[1]  1  2  4  8 16 32</span><br><span class="line">&gt; 2.1^(0:5)  ## 公比为2.1</span><br><span class="line">[1]  1.00000  2.10000  4.41000  9.26100 19.44810 40.84101</span><br></pre></td></tr></table></figure><h3 id="seq-函数"><a href="#seq-函数" class="headerlink" title="seq()函数"></a>seq()函数</h3><p><code>seq()</code> 函数也是用来产生等差级数向量的，其原型为 <code>seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),length.out = NULL, along.with = NULL, ...)</code> 。典型用法有：</p><ul><li><code>seq(from, to)</code> ：等价于 <code>from:to</code> 运算</li><li><code>seq(from, to, by= )</code> ：参数 <code>by</code> 设置公差的大小，最后元素 <code>≤to</code> 值</li><li><code>seq(from, to, length.out= )</code> ：参数 <code>length.out</code> 设置输出向量的长度，第一个元素为 <code>from</code> 值，最后元素的值为 <code>to</code> ，公差由函数自动计算给出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; seq(2, 7)</span><br><span class="line">[1] 2 3 4 5 6 7</span><br><span class="line">&gt; seq(11, 3)</span><br><span class="line">[1] 11 10  9  8  7  6  5  4  3</span><br><span class="line">&gt; seq(2.1, 7)</span><br><span class="line">[1] 2.1 3.1 4.1 5.1 6.1</span><br><span class="line">&gt; seq(2, 7, by&#x3D;1.1)   ## 公差为1.1</span><br><span class="line">[1] 2.0 3.1 4.2 5.3 6.4</span><br><span class="line">&gt; seq(2, 7, length.out&#x3D;8)  ## 输出向量的长度为8，第一个元素为2，最后元素为7</span><br><span class="line">[1] 2.000000 2.714286 3.428571 4.142857 4.857143 5.571429 6.285714 7.000000</span><br></pre></td></tr></table></figure><h3 id="rep-函数"><a href="#rep-函数" class="headerlink" title="rep()函数"></a>rep()函数</h3><p><strong>重复</strong>向量中的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; rep(1:4, 2)</span><br><span class="line">[1] 1 2 3 4 1 2 3 4</span><br><span class="line">&gt; rep(1:4, each &#x3D; 2)        ## not the same.</span><br><span class="line">[1] 1 1 2 2 3 3 4 4</span><br><span class="line">&gt; rep(1:4, c(2,2,2,2))      ## same as second.</span><br><span class="line">[1] 1 1 2 2 3 3 4 4</span><br><span class="line">&gt; rep(1:4, c(2,1,2,1))</span><br><span class="line">[1] 1 1 2 3 3 4</span><br><span class="line">&gt; rep(1:4, each &#x3D; 2, len &#x3D; 4)     ## first 4 only.</span><br><span class="line">[1] 1 1 2 2</span><br><span class="line">&gt; rep(1:4, each &#x3D; 2, len &#x3D; 10)    ## 8 integers plus two recycled 1&#39;s.</span><br><span class="line"> [1] 1 1 2 2 3 3 4 4 1 1</span><br><span class="line">&gt; rep(1:4, each &#x3D; 2, times &#x3D; 3)    ## length 24, 3 complete replications</span><br><span class="line"> [1] 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4</span><br></pre></td></tr></table></figure><h2 id="向量有关函数"><a href="#向量有关函数" class="headerlink" title="向量有关函数"></a>向量有关函数</h2><ul><li><p><code>max(x)</code>：找出x向量中的<strong>最大值</strong></p></li><li><p><code>min(x)</code>：找出x向量中的<strong>最小值</strong></p></li><li><p><code>range(x)</code>：找出x向量中的<strong>最小值和最大值</strong></p></li><li><p><code>length(x)</code>：求x向量的<strong>长度</strong></p></li><li><p><code>sum(x)</code>：求x向量的<strong>元素和</strong></p></li><li><p><code>prod(x)</code>：求x向量的<strong>元素积</strong></p></li><li><p><code>mean(x)</code>：求x向量的<strong>算术平均值</strong></p></li><li><p><code>median(x)</code>：求x向量的<strong>中位数</strong></p></li><li><p><code>var(x)</code>：求x向量的<strong>方差</strong></p></li><li><p><code>sd(x)</code>：求x向量的<strong>标准差</strong></p></li><li><p><code>cor(x, y)</code>：求x向量和y向量的<strong>相关系数</strong></p></li><li><p><code>sort(x)</code>：将x向量<strong>按大小顺序排序</strong></p></li><li><p><code>rank(x)</code>：返回x向量中<strong>对应元素的排名</strong></p></li><li><p><code>order(x)</code>：返回对应“排名”的<strong>元素在x向量中的位置</strong></p></li><li><p><code>quantile(x)</code>：返回x向量的<strong>最小值、下分位数、中位数、上分位数和最大值</strong></p></li><li><p><code>cumsum(x)</code>：返回x向量的<strong>累计和</strong></p></li><li><p><code>cumprod(x)</code>：返回x向量的<strong>累计积</strong></p></li><li><p><code>cummax(x)</code>：返回x向量的<strong>累计最大值</strong></p></li><li><p><code>cummin(x)</code>：返回x向量的<strong>累计最小值</strong></p></li><li><p><code>pmax(x, y, z)</code>：返回x、y、z向量<strong>对应位置上的最大值</strong></p></li><li><p><code>pmin(x, y, z)</code>：返回x、y、z向量<strong>对应位置上的最小值</strong></p></li><li><p><code>table(x)</code>：返回x向量的元素<strong>统计频数</strong></p></li><li><p><code>diff(x)</code>：返回x向量的<strong>相邻两元素之差</strong></p></li><li><p><code>unique(x)</code>：删除x向量中的<strong>重复元素</strong></p></li><li><p><code>union(x, y)</code>：x向量和y向量的<strong>并集</strong></p></li><li><p><code>intersect(x, y)</code>：x向量和y向量的<strong>交集</strong></p></li><li><p><code>setdiff(x, y)</code>：x向量和y向量的<strong>差集</strong>（即返回属于x向量的元素但不属于y向量）</p></li><li><p><code>x %in% y</code>：<strong>判断</strong>x向量中的元素是否在y向量中</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(2, 4, 5, 3, 2)</span><br><span class="line">&gt; y &lt;- c(7, 2, 3, 8, 6)</span><br><span class="line">&gt; z &lt;- c(1, 7, 2, 9, 0)</span><br><span class="line"></span><br><span class="line">&gt; max(x)          ## 最大值</span><br><span class="line">[1] 5</span><br><span class="line"></span><br><span class="line">&gt; min(x)          ## 最小值</span><br><span class="line">[1] 2</span><br><span class="line"></span><br><span class="line">&gt; range(x)        ## 最小值和最大值</span><br><span class="line">[1] 2 5</span><br><span class="line"></span><br><span class="line">&gt; length(x)       ## 长度</span><br><span class="line">[1] 5</span><br><span class="line"></span><br><span class="line">&gt; sum(x)          ## 求和</span><br><span class="line">[1] 16</span><br><span class="line"></span><br><span class="line">&gt; prod(x)         ## 求积</span><br><span class="line">[1] 240</span><br><span class="line"></span><br><span class="line">&gt; mean(x)         ## 算术平均值</span><br><span class="line">[1] 3.2</span><br><span class="line"></span><br><span class="line">&gt; median(x)       ## 中位数</span><br><span class="line">[1] 3</span><br><span class="line"></span><br><span class="line">&gt; var(x)          ## 方差</span><br><span class="line">[1] 1.7</span><br><span class="line"></span><br><span class="line">&gt; sd(x)           ## 标准差</span><br><span class="line">[1] 1.30384</span><br><span class="line"></span><br><span class="line">&gt; cor(x, y)       ## 相关系数</span><br><span class="line">[1] -0.7555763</span><br><span class="line"></span><br><span class="line">&gt; sort(x)         ## 按大小顺序排序</span><br><span class="line">[1] 2 2 3 4 5</span><br><span class="line"></span><br><span class="line">&gt; rank(y)         ## 对应元素的排名</span><br><span class="line">[1] 4 1 2 5 3</span><br><span class="line"></span><br><span class="line">&gt; order(x)        ## 对应排名的元素在x向量中的位置</span><br><span class="line">[1] 1 5 4 2 3</span><br><span class="line"></span><br><span class="line">&gt; quantile(x)                 ## 最小值、下分位数、中位数、上分位数和最大值</span><br><span class="line">  0%  25%  50%  75% 100%</span><br><span class="line">   2    2    3    4    5</span><br><span class="line"></span><br><span class="line">&gt; cumsum(x)                   ## 累计和</span><br><span class="line">[1]  2  6 11 14 16</span><br><span class="line"></span><br><span class="line">&gt; cumprod(x)                  ## 累计积</span><br><span class="line">[1]   2   8  40 120 240</span><br><span class="line"></span><br><span class="line">&gt; cummax(x)                   ## 累计最大值</span><br><span class="line">[1] 2 4 5 5 5</span><br><span class="line"></span><br><span class="line">&gt; cummin(x)                   ## 累计最小值</span><br><span class="line">[1] 2 2 2 2 2</span><br><span class="line"></span><br><span class="line">&gt; pmax(x, y, z)               ## x、y、z向量对应位置上的最大值</span><br><span class="line"></span><br><span class="line">[1] 7 7 5 9 6</span><br><span class="line"></span><br><span class="line">&gt; pmin(x, y, z)               ## x、y、z向量对应位置上的最小值</span><br><span class="line">[1] 1 2 2 3 0</span><br><span class="line"></span><br><span class="line">&gt; table(x)                    ## 元素统计频数</span><br><span class="line">x</span><br><span class="line">2 3 4 5</span><br><span class="line">2 1 1 1</span><br><span class="line"></span><br><span class="line">&gt; diff(x)                     ## 相邻两元素之差</span><br><span class="line">[1]  2  1 -2 -1</span><br><span class="line"></span><br><span class="line">&gt; unique(x)                   ## 删除重复元素</span><br><span class="line">[1] 2 4 5 3</span><br><span class="line"></span><br><span class="line">&gt; union(x, y)                 ## 并集</span><br><span class="line">[1] 2 4 5 3 7 8 6</span><br><span class="line"></span><br><span class="line">&gt; intersect(x, y)             ## 交集</span><br><span class="line">[1] 2 3</span><br><span class="line"></span><br><span class="line">&gt; setdiff(x, y)               ## 差集</span><br><span class="line">[1] 4 5</span><br><span class="line"></span><br><span class="line">&gt; x %in% y                    ## 判断x向量中的元素是否在y向量中</span><br><span class="line"></span><br><span class="line">[1]  TRUE FALSE FALSE  TRUE  TRUE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级05--取整运算、有效小数、有效数字</title>
      <link href="/2020/04/dataAnalyse/R/R5/"/>
      <url>/2020/04/dataAnalyse/R/R5/</url>
      
        <content type="html"><![CDATA[<ul><li><p>取整运算：通俗点讲就是将一个小数（浮点数）转化成整数。比如，我们可以将3.42转化为3或者4</p></li><li><p>有效小数：将一个小数近似为小数位特定的小数。比如，将3.1415926转化为两位有效小数，即3.14</p></li><li><p>有效数字：将一个数近似为特定有效位数的数字。比如，将23456保留两位有效数字，即23000</p><a id="more"></a></li></ul><p>对应的在R中有相应的函数：</p><ul><li><p>取整运算：ceiling()，floor()，trunc()和round()</p></li><li><p>有效小数：round()</p></li><li><p>有效数字：signif()</p></li></ul><h2 id="ceiling-函数"><a href="#ceiling-函数" class="headerlink" title="ceiling()函数"></a>ceiling()函数</h2><p><code>ceiling()</code>函数返回对应数字的“天花板”值，即不小于该数字的最小整数，俗称向上取整。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ceiling(2.8)</span><br><span class="line">[1] 3</span><br><span class="line">ceiling(-1.7)</span><br><span class="line">[1] -1</span><br><span class="line">ceiling(5.0)</span><br><span class="line">[1] 5</span><br></pre></td></tr></table></figure><h2 id="floor-函数"><a href="#floor-函数" class="headerlink" title="floor()函数"></a>floor()函数</h2><p><code>floor()</code>函数返回对应数字的“地板”值，即不大于该数字的最大整数，俗称向下取整。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">trunc(-1.7)</span><br><span class="line">[1] -1</span><br><span class="line">trunc(2.8)</span><br><span class="line">[1] 2</span><br><span class="line">trunc(5.0)</span><br><span class="line">[1] 5</span><br><span class="line">trunc(2.8) &#x3D;&#x3D; floor(2.8)</span><br><span class="line">[1] TRUE</span><br><span class="line">trunc(-1.7) &#x3D;&#x3D; ceiling(-1.7)</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h2 id="trunc-函数"><a href="#trunc-函数" class="headerlink" title="trunc()函数"></a>trunc()函数</h2><p><code>trunc()</code>函数的特点是“向零取整”。 对于数字a，trunc(a)将返回靠近0那一侧的那个整数，见下图。如果a为正数，<code>trunc(a) == floor(a)</code>；如果a为负数，<code>trunc(a) == ceiling(a)</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">trunc(-1.7)</span><br><span class="line">[1] -1</span><br><span class="line">trunc(2.8)</span><br><span class="line">[1] 2</span><br><span class="line">trunc(5.0)</span><br><span class="line">[1] 5</span><br><span class="line">trunc(2.8) &#x3D;&#x3D; floor(2.8)</span><br><span class="line">[1] TRUE</span><br><span class="line">trunc(-1.7) &#x3D;&#x3D; ceiling(-1.7)</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h2 id="round-函数"><a href="#round-函数" class="headerlink" title="round()函数"></a>round()函数</h2><p>R中采用banker准则，即四舍六入五成双准则</p><blockquote><p>“四舍”是指 ≤ 4舍去；<br>“六入”是指 ≥ 6进一位；<br>“五成双”分两种情况：(1)当5后面有数字时，舍5进一位。(2) 当5后面没有数字时，再分两种情况：(i)当5前一位为奇数时，舍5进一位；(ii)当5前一位为偶数时，舍5不进位。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">round(2.3)</span><br><span class="line">[1] 2</span><br><span class="line">round(2.6)</span><br><span class="line">[1] 3</span><br><span class="line">round(2.50001)</span><br><span class="line">[1] 3</span><br><span class="line">round(2.5)</span><br><span class="line">[1] 2</span><br><span class="line">round(3.5)</span><br><span class="line">[1] 4</span><br><span class="line">round(5.0)</span><br><span class="line">[1] 5</span><br></pre></td></tr></table></figure><p>其实<code>round()</code>函数的原型是<code>round(x, digits = 0)</code>。其中参数digits设定小数点的位数，默认为<code>0</code>，即小数点后零位(取整)。</p><p>我们来看一下保留一位小数（即digits = 1）的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">round(3.24, 1)</span><br><span class="line">[1] 3.2</span><br><span class="line">round(3.26, 1)</span><br><span class="line">[1] 3.3</span><br><span class="line">round(3.2500001, 1)</span><br><span class="line">[1] 3.3</span><br><span class="line">round(3.25, 1)</span><br><span class="line">[1] 3.2</span><br><span class="line">round(3.35, 1)</span><br><span class="line">[1] 3.4</span><br></pre></td></tr></table></figure><h2 id="signif-函数"><a href="#signif-函数" class="headerlink" title="signif()函数"></a>signif()函数</h2><p><code>signif()</code>是保留有效数字的函数，常用于科学计数，它的原型为<code>signif(x, digits = 6)</code>。其中参数digits设定有效数字的位数，默认为6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signif(3.5455562)</span><br><span class="line">[1] 3.54556</span><br><span class="line">signif(35455562)</span><br><span class="line">[1] 35455600</span><br><span class="line">signif(35455562, 7)</span><br><span class="line">[1] 35455560</span><br><span class="line">signif(-35455562, 7)</span><br><span class="line">[1] -35455560</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级04--复数</title>
      <link href="/2020/04/dataAnalyse/R/R4/"/>
      <url>/2020/04/dataAnalyse/R/R4/</url>
      
        <content type="html"><![CDATA[<p>复数是实数的延伸。任一复数都可表达为<code>a+bi</code>，其中a和b都为实数，分别称为复数的实部和虚部；而i为虚数单位，它是-1的一个平方根，即<code>i^2=-1</code></p><a id="more"></a><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">z1 &lt;- 2 - 3i</span><br><span class="line">z2 &lt;- 1 + 4i</span><br><span class="line">z1 + z2</span><br><span class="line">[1] 3+1i</span><br><span class="line">z1 / z2</span><br><span class="line">[1] -0.5882353-0.6470588i</span><br><span class="line"><span class="built_in">log</span>(z1)</span><br><span class="line">[1] 1.282475-0.982794i</span><br><span class="line">exp(z1)</span><br><span class="line">[1] -7.31511-1.042744i</span><br><span class="line">sin(z1)</span><br><span class="line">[1] 9.154499+4.168907i</span><br></pre></td></tr></table></figure><h2 id="复数的处理"><a href="#复数的处理" class="headerlink" title="复数的处理"></a>复数的处理</h2><blockquote><ul><li><p>Re(z)：获取复数的实部</p></li><li><p>Im(z)：获取复数的虚部</p></li><li><p>Mod(z): 计算复数的模，即$|z|= \sqrt {a^2+b^2}$</p></li><li><p>Arg(z)：计算复数的相位（幅角），即 θ= atan(b/a)，结果为弧度制</p></li><li><p>Conj(z)：计算复数的共轭$\overline{z}$，即 $a - bi$</p></li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">z &lt;- 3 + 4i</span><br><span class="line">Re(z)</span><br><span class="line">[1] 3</span><br><span class="line">Im(z)</span><br><span class="line">[1] 4</span><br><span class="line">Mod(z)</span><br><span class="line">[1] 5</span><br><span class="line">Arg(z)</span><br><span class="line">[1] 0.9272952</span><br><span class="line">Conj(z)</span><br><span class="line">[1] 3-4i</span><br></pre></td></tr></table></figure><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z &lt;- 3 + 4i</span><br><span class="line">is.complex(z)   ### 判断一个数是否为复数</span><br><span class="line">[1] TRUE</span><br><span class="line">is.complex(4)</span><br><span class="line">[1] FALSE</span><br><span class="line">as.complex(3.5)  ### 将一个数转化为复数</span><br><span class="line">[1] 3.5+0i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级03--关系运算、逻辑运算</title>
      <link href="/2020/04/dataAnalyse/R/R3/"/>
      <url>/2020/04/dataAnalyse/R/R3/</url>
      
        <content type="html"><![CDATA[<p>R的逻辑常量：<code>TRUE和FALSE</code></p><p>在R中，<code>TRUE和FALSE</code>分别表示逻辑常量<code>真和假</code>，其值分别为<code>1和0</code></p><a id="more"></a><p><em>在其它语言中，<code>TRUE和FALSE</code>习惯被称为布尔值 (Boolean value)。</em></p><h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2><p>运算符：<code>&gt;，&lt;，&gt;=，&lt;=，== 和 !=</code></p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p><code>&amp;，|，和 !</code>运算符分别表示逻辑<code>与，或和非</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; TRUE &amp; FALSE</span><br><span class="line">[1] FALSE</span><br><span class="line">&gt; TRUE &amp; TRUE</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; TRUE | FALSE</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; FALSE | FALSE</span><br><span class="line">[1] FALSE</span><br><span class="line">&gt; !FALSE</span><br><span class="line">[1] TRUE</span><br><span class="line">&gt; !TRUE</span><br><span class="line">[1] FALSE</span><br><span class="line">&gt; (2 &gt; 3) | (7 &gt;= 7)</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><p>除了上面三个常用的逻辑运算符之外，<code>xor()</code>函数有时也用到，它表示逻辑<code>异或</code>。如果两个值不相同，异或结果为TRUE；如果两个值相同，异或结果则为FALSE</p><p><em>有些人会纳闷，为啥<code>xor(2, 3)</code>结果会为FALSE。那是因为在R中，所有非零值在逻辑运算中都会被当作为TRUE。因此xor(2, 3)等价于<code>xor(TRUE, TRUE)</code>, 再举一些其它例子：</em></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级02--基本算术运算</title>
      <link href="/2020/04/dataAnalyse/R/R2/"/>
      <url>/2020/04/dataAnalyse/R/R2/</url>
      
        <content type="html"><![CDATA[<p>R的一个最简单功能，是它可以充当计算器来用，而且是个超级计算器。</p><p>R中的基本运算包括：算术运算、关系运算、逻辑运算、赋值运算以及其他运算。</p><a id="more"></a><p>这篇博客将介绍R中的算术运算，主要包括：</p><ul><li>四则运算</li><li>整除运算</li><li>幂指数运算</li><li>自然指数运算</li><li>对数运算</li><li>绝对值运算</li><li>平方根运算</li><li>三角函数运算</li></ul><h2 id="1-四则运算"><a href="#1-四则运算" class="headerlink" title="1. 四则运算"></a>1. 四则运算</h2><p>在R中，加减乘除运算符分别用 <code>+， -， *</code>和 <code>/</code>来表示，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 7 + 4 - 5 * 2</span><br><span class="line">[1] 1</span><br><span class="line">&gt; 12 - 2 / 3</span><br><span class="line">[1] 11.33333</span><br><span class="line">&gt; 3 / (4 - 2)</span><br><span class="line">[1] 1.5</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>&gt;</code>是输入提示符，系统自动给出，不用输入；代码输完后回车运行代码；<code>[1]</code>后面跟着的是运算结果。</p></blockquote><h2 id="2-整除运算"><a href="#2-整除运算" class="headerlink" title="2. 整除运算"></a>2. 整除运算</h2><p>整除的商用<code>%/%</code>来表示；整除的余数用<code>%%</code>来表示，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 23 %/% 3</span><br><span class="line">[1] 7</span><br><span class="line">&gt; 23 %% 3</span><br><span class="line">[1] 2</span><br><span class="line">&gt; (23 %/% 3) * 3 + 23 %% 3 == 23</span><br><span class="line">[1] TRUE</span><br></pre></td></tr></table></figure><h2 id="3-幂指数运算"><a href="#3-幂指数运算" class="headerlink" title="3. 幂指数运算"></a>3. 幂指数运算</h2><p>幂指数运算符用<code>^</code>来表示，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2^3</span><br><span class="line">[1] 8</span><br><span class="line">&gt; 1.5^2</span><br><span class="line">[1] 2.25</span><br><span class="line">&gt; 9^0.5</span><br><span class="line">[1] 3</span><br><span class="line">&gt; 27^(1 / 3)</span><br><span class="line">[1] 3</span><br></pre></td></tr></table></figure><h2 id="4-自然指数运算"><a href="#4-自然指数运算" class="headerlink" title="4. 自然指数运算"></a>4. 自然指数运算</h2><p><code>exp()</code>表示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; exp(0)</span><br><span class="line">[1] 1</span><br><span class="line">&gt; exp(1)    <span class="comment">###自然常数e</span></span><br><span class="line">[1] 2.718282  </span><br><span class="line">&gt; exp(2)</span><br><span class="line">[1] 7.389056</span><br><span class="line">&gt; exp(1)^2</span><br><span class="line">[1] 7.389056</span><br></pre></td></tr></table></figure><h2 id="5-对数运算"><a href="#5-对数运算" class="headerlink" title="5. 对数运算"></a>5. 对数运算</h2><p>对数运算是幂运算的逆操作，在R中可分为以下四类：</p><ul><li><p>以自然常数<code>e</code>为底的对数：<code>log()</code></p></li><li><p>以<code>2</code>为底的对数：<code>log2()</code></p></li><li><p>以<code>10</code>为底的对数：<code>log10()</code></p></li><li><p>以任意数<code>a</code>为底的对数：<code>log( , base = a)</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">log</span>(exp(2))</span><br><span class="line">[1] 2</span><br><span class="line">&gt; <span class="built_in">log</span>(10)</span><br><span class="line">[1] 2.302585</span><br><span class="line">&gt; log2(2)</span><br><span class="line">[1] 1</span><br><span class="line">&gt; log10(1000)</span><br><span class="line">[1] 3</span><br><span class="line">&gt; <span class="built_in">log</span>(49, base = 7)</span><br><span class="line">[1] 2</span><br></pre></td></tr></table></figure><h2 id="6-绝对值运算"><a href="#6-绝对值运算" class="headerlink" title="6. 绝对值运算"></a>6. 绝对值运算</h2><p>绝对值运算用<code>abs()</code>函数，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; abs(2)</span><br><span class="line">[1] 2</span><br><span class="line">&gt; abs(-2)</span><br><span class="line">[1] 2</span><br></pre></td></tr></table></figure><h2 id="7-平方根运算"><a href="#7-平方根运算" class="headerlink" title="7. 平方根运算"></a>7. 平方根运算</h2><p>平方根运算用<code>sqrt()</code>函数，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; sqrt(2)</span><br><span class="line">[1] 1.414214</span><br><span class="line">2^0.5</span><br><span class="line">[1] 1.414214</span><br><span class="line">&gt; sqrt(100)</span><br><span class="line">[1] 10</span><br><span class="line">&gt; 100^0.5</span><br><span class="line">[1] 10</span><br></pre></td></tr></table></figure><blockquote><p>从上面可知，一个数的平方根值等于这个数的0.5次幂。</p></blockquote><h2 id="8-三角函数运算"><a href="#8-三角函数运算" class="headerlink" title="8. 三角函数运算"></a>8. 三角函数运算</h2><p>在介绍三角函数之前，先介绍跟三角函数紧密关联的一个常数：<code>π</code>（圆周率，3.1415926……）。在R中直接用<code>pi</code>表示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; pi</span><br><span class="line">[1] 3.141593</span><br></pre></td></tr></table></figure><p>R中的三角函数采用弧度制，<code>sin()，cos()，tan()，asin()，acos()和atan()</code>分别表示正弦、余弦、正切、反正弦、反余弦和反正切。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; sin(pi/6)</span><br><span class="line">[1] 0.5</span><br><span class="line">&gt; sin(pi/2)</span><br><span class="line">[1] 1</span><br><span class="line">&gt; cos(pi/2)</span><br><span class="line">[1] 6.123032e-17</span><br><span class="line">&gt; cos(pi/2) == 0</span><br><span class="line">[1] FALSE</span><br><span class="line">&gt; tan(pi/4)</span><br><span class="line">[1] 1</span><br><span class="line">&gt; atan(1)</span><br><span class="line">[1] 0.7853982</span><br><span class="line">&gt; pi/4</span><br><span class="line">[1] 0.7853982</span><br></pre></td></tr></table></figure><blockquote><p>奇怪的是，<code>cos(pi / 2)</code>的值竟然不等于0，而是一个非常非常小的值6.123032e-17（非常接近0）。其中<code>e-17</code>是科学计数表示，意思是10的-17次方，非常小。这个现象是由计算精度所导致的，后续博客我们还会讨论。</p></blockquote><hr><p>本文摘自<a href="https://www.jianshu.com/p/297a21cbafc2" target="_blank" rel="noopener">MoreInfo</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python初级01--关键字和标识符</title>
      <link href="/2020/04/dataAnalyse/Python/Python1/"/>
      <url>/2020/04/dataAnalyse/Python/Python1/</url>
      
        <content type="html"><![CDATA[<p>还没开工–</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R初级01--实用第三方包、如何获取帮助</title>
      <link href="/2020/04/dataAnalyse/R/R1/"/>
      <url>/2020/04/dataAnalyse/R/R1/</url>
      
        <content type="html"><![CDATA[<p>本章讲解R使用须知</p><a id="more"></a><h2 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h2><p>安装好R和Rstudio之后，使用第三方包前，需要先安装它：</p><ul><li><p>安装用<code>install.packages()</code>函数，比如<code>install.packages(&#39;data.table&#39;)</code></p></li><li><p>加载包用<code>library()</code>函数，比如<code>library(animation)</code></p></li><li><p>用<code>library(help=data.table)</code>来查看<code>data.table</code>包的相关信息</p></li></ul><h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><p>R 的帮助系统非常强大，可以直接使用 <code>?topic</code> 或 <code>help(topic)</code> 来获取 topic 的帮助信息；也可使用 <code>help.search(&quot;topic&quot;)</code> 来搜索帮助系统</p><p>如果你只知道函数的部分名称，那么可以使用 <code>apropos(&quot;tab&quot;)</code> 来搜索得到载入内存所有包含 tab 字段的函数</p><p>如果还没有得到需要的资料，还有<a href="http://finzi.psych.upenn.edu/search.html" target="_blank" rel="noopener">RSiteSearch</a>，等价于在 R 平台上使用 <code>RSiteSearch()</code> 函数。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/hello-world/"/>
      <url>/2020/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
